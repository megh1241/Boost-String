The header file 'aho_corasick.hpp' contains an implementation of the Aho - Corasick algorithm for searching sequences of values. It is primarily used to search for multiple patterns within a corpus. 

The Aho - Corasick algorithm works by building a trie (a tree with each node corresponding to an ASCII character) of the patterns strings and
traversing the trie to search for the pattern in a given text. Additionally, the Aho - Corasick introduced the concept of "failure
pointer/failure node" which is the node to be traversed when there is a mismatch.

The algorithm was conceived in 1975 by Alfred V. Aho  and Margaret J. Corasick. Their paper "Efficient string matching: An aid to bibliographic search" was published in the Communications of the ACM.

Nomenclature: The nomenclature is similar to that of the Knuth Morris Pratt implementation in Boost.Algorithm. The sequence being searched for is referred to as the "pattern", and the sequence being searched in is referred to as the "corpus".

Just like the previous string searching algorithms that have been implemented in Boost, there is an object based interface as well as a procedure based interface. In the object based interface, the trie is constructed and the failure nodes are computed in the constructor (while creating the object). The user can then search the text using the operator().

    template <typename patIter>
    class aho_corasick {
    public:

    aho_corasick(patIter first, patIter last): pat_first(first),
pat_last(last), head(std::shared_ptr<trie_node>(new trie_node)) {
//first and last are pointers/iterators to the first and last patterns in
the container
        gotoFn(head);
        failureFn(head);
    }
    ~aho_corasick () {};
    template <typename corpusIter>
    corpusIter operator ()(corpusIter corpus_first, corpusIter corpus_last)

Complexity:
The complexity of the algorithm is linear in the sum of the length of the strings, the length of the corpus and number of matches in the output.
